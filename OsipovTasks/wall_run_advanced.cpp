#include <iostream>
#include <cmath>
using namespace std;

/*
В космосе есть бесконечная плоскость, удаляющаяся от наблюдателя с постоянной скоростью из позиции наблюдателя с начала наблюдений.
Спустя некоторое время наблюдения, наблюдатель бросает в плоскость предмет в направлении перпендикулярном плоскости.

Описать модель явления.
Написать программу, иллюстрирующую явление.
Указание: выполнить моделирование приближенным пошаговым методом.
Знаем, где находится плоскость в момент броска, можем определить время, за которое предмет попадет в это положение.
За это время плоскость переместится в новое положение и т.д.
Получить точную формулу для расчета результатов.

------------------------------------------------------------------------------------------------------------------------------------------------------


Смоделировать явление, предложенное на прошлой неделе, последовательностью событий - тело долетело до позиции в которой была плоскость в момент его броска, а плоскость - убежала.
Подумать, как получить точный результат в этом случае. Подумать, какие последовательности убывающие, возрастающие возникнут при таком моделировании.

------------------------------------------------------------------------------------------------------------------------------------------------------

Запомнить результаты моделирования последовательностью по шагам, используя для этого динамический однонаправленный список.

*/

int main() {
  double wall_speed, wall_x_coord=0, ball_x_coord=0, ball_speed, time_before_throw, current_time=0;

  // Скорости в метрах\секунду, время в секундах
  wall_speed = 3;
  ball_speed = 5;
  time_before_throw = 1;

  // Столкновения никогда не произойдет
  if ((wall_speed > ball_speed)) {
    cout << "Столкновения никогда не произойдет!" << endl;
    return 0;
  }

  // Будут двигаться как единое целое
  if ((ball_speed == wall_speed && (time_before_throw == 0))) {
    cout << "Будут двигаться как единое целое!" << endl;
    return 0;
  }

  // Расчет координаты каждого тела за еденицу времени
  while (true) {
    if (current_time < time_before_throw) {  // Тело пока не двигается
      wall_x_coord += wall_speed;
      current_time += 1;
    } else {  // Тело бросили
      wall_x_coord += wall_speed;
      ball_x_coord += ball_speed;
      current_time += 1;
    }

    // Посекундный отчет
    cout << "Coor ball: " << ball_x_coord << "; Coord wall: " << wall_x_coord << "; Time: " << current_time << endl;

    // Отчет о столкновении
    if (wall_x_coord <= ball_x_coord) {
        cout << "Time before touch: " << current_time << " seconds!" << endl;
        return 0;
    }
  }
}
